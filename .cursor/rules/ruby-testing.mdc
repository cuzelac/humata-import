---
description: Ruby Testing Standards Rule
globs: *_spec.rb
alwaysApply: false
---

# Ruby Testing Standards Rule

## Description
This rule establishes standards for testing Ruby code, ensuring consistent use of minitest as the testing framework and maintaining high test quality.

## Rule
When writing tests for Ruby code:

1. **Testing Framework**
   - MUST use minitest as the testing framework
   - MUST use minitest/spec DSL for test structure
   - MUST NOT use RSpec, Test::Unit, or other testing frameworks
   - MUST include minitest/autorun, minitest/spec, and minitest/mock in test files

2. **Test File Organization**
   - Test files MUST be placed in `spec/` directory
   - Test files MUST end with `_spec.rb` suffix
   - Test files MUST require 'spec_helper' at the top
   - Unit tests go in `spec/unit/`
   - Integration tests go in `spec/integration/`

3. **Test Structure**
   - Use `describe` blocks for grouping related tests
   - Use `it` blocks for individual test cases
   - Use descriptive test names that explain the expected behavior
   - Use `before_all`, `after_all`, `before_each`, `after_each` for setup/teardown
   - Include `Minitest::Hooks` for lifecycle methods

4. **Assertions and Expectations**
   - Use minitest assertions: `assert`, `assert_equal`, `assert_nil`, etc.
   - Use expectation syntax: `_(actual).must_equal expected`
   - Use `wont_be_nil`, `must_be_nil`, `must_include`, etc. for readability
   - Provide clear failure messages in assertions

5. **Mocking and Stubbing**
   - Use `Minitest::Mock` for creating mock objects
   - Use `stub` method for method stubbing
   - Verify mock expectations with `verify`
   - Use WebMock for HTTP request mocking
   - Mock non-essential dependencies (notifiers, external services, etc.) to focus tests on core functionality
   - Avoid testing infrastructure concerns unless they're part of the core business logic
   - **CRITICAL**: Always provide mock clients for commands that make external calls (e.g., `humata_client:` parameter)
   - **CRITICAL**: Always stub sleep calls in retry-related tests to prevent timeouts

6. **Test Data and Helpers**
   - Use `TestHelpers` module for common test utilities
   - Create test data using helper methods like `create_test_file`
   - Use `SecureRandom` for generating unique test data
   - Clean up test data in `setup`/`teardown` methods (not `before_each`/`after_each`)
   - **CRITICAL**: Use proper test lifecycle methods to ensure test isolation

## Testing Core Functionality

When writing tests, focus on the essential business logic rather than infrastructure concerns:

1. **Mock Non-Essential Dependencies**
   - Mock notifiers, external services, and other infrastructure components
   - Focus tests on business logic behavior, not side effects
   - Use `Minitest::Mock` for simple dependency mocking

2. **Example: Mocking Infrastructure**
   ```ruby
   # Mock notifier to test core functionality
   notifier_mock = Minitest::Mock.new
   notifier_mock.expect :send, true, [String]
   
   # Mock external service to isolate business logic
   service_mock = Minitest::Mock.new
   service_mock.expect :process, { success: true }, [Hash]
   ```

3. **Test What Matters**
   - Verify the core business logic works correctly
   - Test the "what" not the "how" of external interactions
   - Only test infrastructure when it's part of the core functionality

## Critical Examples

✅ Good Test Structure:
```ruby
require 'spec_helper'

describe Upload do
  def before_each
    @db.execute('DELETE FROM file_records')
  end

  it 'uploads file successfully' do
    client_mock = Minitest::Mock.new
    client_mock.expect :upload_file, { 'id' => 'humata-1' }, [String]
    
    result = upload.run(['--folder-id', '123'], humata_client: client_mock)
    _(result).must_equal true
    client_mock.verify
  end
end
```

❌ Bad: Don't use RSpec
```ruby
require 'rspec'
RSpec.describe Upload do
  it 'should upload file' do
    expect(result).to eq(expected)
  end
end
```

## Benefits
- Consistent testing framework across the project
- Faster test execution with minitest
- Better integration with Ruby standard library
- Clear and readable test syntax
- Reduced external dependencies

## Test Execution
- Run tests with: `bundle exec rake test`
- Run verbose tests with: `bundle exec rake test_verbose`
- Individual test files can be run directly with Ruby

## Dependencies
- minitest (included in Ruby standard library)
- minitest/spec for spec DSL
- minitest/mock for mocking
- minitest/hooks for lifecycle methods
- webmock/minitest for HTTP mocking

## Related Rules
- **test-performance.mdc**: For preventing long-running tests and timeouts
- **dependency-injection.mdc**: For proper mocking and test isolation
