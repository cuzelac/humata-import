---
description: Database Schema Update Rule
globs: *.rb
alwaysApply: false
---

## Description
This rule ensures that any database schema changes are accompanied by a schema update script to bring existing databases up to date, maintaining data consistency and enabling seamless upgrades. The project uses a simple script-based approach rather than a complex migration framework.

## Rule
When updating the database schema:

1. **Schema Update Script Requirement**
   - MUST create or update the schema update script for any schema changes
   - MUST place the script in `scripts/update_schema.rb`
   - MUST ensure the script is idempotent (safe to run multiple times)
   - MUST update both the script and `lib/humata_import/database.rb` schema initialization

2. **Schema Update Script Structure**
   - MUST create automatic backups before any schema changes
   - MUST detect existing schema state before making changes
   - MUST only add missing columns, never modify existing data
   - MUST include error handling with automatic backup restoration
   - MUST verify final schema matches expectations

3. **Schema Update Process**
   - MUST create timestamped backup before any changes
   - MUST check for existing columns before adding new ones
   - MUST use safe SQL operations (e.g., `ALTER TABLE ADD COLUMN`)
   - MUST provide clear progress feedback and error messages
   - MUST clean up backup files on successful completion

4. **Backward Compatibility**
   - MUST ensure schema updates can be run on existing databases
   - MUST handle missing columns gracefully
   - MUST preserve all existing data during schema updates
   - MUST not break existing functionality

5. **Idempotency**
   - MUST be safe to run multiple times without side effects
   - MUST check existing state before making changes
   - MUST use conditional logic to avoid duplicate operations
   - MUST handle partial failures gracefully with backup restoration

## Implementation Guidelines

### Schema Update Script Location
```
scripts/
└── update_schema.rb          # Single script for all schema updates
```

### Schema Update Script Structure
```ruby
# scripts/update_schema.rb
class SchemaUpdater
  def run
    # 1. Create backup of existing database
    # 2. Detect missing columns
    # 3. Add missing columns safely
    # 4. Verify final schema
    # 5. Clean up backup on success
  end
  
  private
  
  def add_missing_column(column_name, column_type)
    # Safe column addition with existence checking
  end
  
  def create_backup
    # Automatic backup before any changes
  end
end
```

### Schema Update Process
```ruby
# When adding a new column:
# 1. Update lib/humata_import/database.rb initialize_schema method
# 2. Update scripts/update_schema.rb to detect and add the column
# 3. Test the script on existing databases
# 4. Document the change in specifications
```

### Usage
```bash
# Update default database
ruby scripts/update_schema.rb

# Update specific database
ruby scripts/update_schema.rb /path/to/database.db
```

## Examples

### ✅ Good: Complete Schema Update Implementation
```ruby
# 1. Update lib/humata_import/database.rb
def self.initialize_schema(db_path)
  db = connect(db_path)
  db.execute_batch <<-SQL
    CREATE TABLE IF NOT EXISTS file_records (
      # ... existing columns ...
      humata_pages INTEGER,  # New column added
      # ... remaining columns ...
    );
  SQL
  db.close
end

# 2. Update scripts/update_schema.rb
def add_missing_column(column_name, column_type)
  if column_exists?(column_name)
    puts "✓ Column '#{column_name}' already exists"
    return 0
  end

  puts "➕ Adding column '#{column_name}' (#{column_type})..."
  @db.execute("ALTER TABLE file_records ADD COLUMN #{column_name} #{column_type}")
  puts "✅ Successfully added column '#{column_name}'"
  return 1
end
```

### ❌ Bad: Missing Schema Update
```ruby
# Direct schema change without updating both files
class Verify < Base
  def run(args)
    # This would fail on existing databases without the new column
    @db.execute("UPDATE file_records SET humata_pages = ? WHERE id = ?", [pages, id])
  end
end
```

## Benefits
- **Data Consistency**: Ensures existing databases can be upgraded
- **Backup Safety**: Automatic backup creation and restoration on failure
- **Production Safety**: Enables safe schema updates in production
- **Simplicity**: Easy to understand and maintain without complex infrastructure
- **Team Collaboration**: Multiple developers can apply schema changes consistently
- **Lower Risk**: No complex refactoring of existing working code

## Enforcement
- Code review must reject schema changes without updating both `database.rb` and `update_schema.rb`
- All database schema modifications must include corresponding schema update script changes
- Schema update script must be tested on existing database instances
- Backup and restore functionality must be verified before deployment

## Exceptions
- Initial database creation can skip schema update script
- Test-only schema changes can skip schema update script
- When in doubt, update both `database.rb` and `update_schema.rb`

## Notes
- This rule complements `cursor-rules-location` for rule organization
- Follows Ruby database schema update best practices
- Ensures consistent schema management across the project
- Applies to all Ruby files that modify database schemas
- The script-based approach was chosen over migration framework for simplicity and immediate value

## Decision Rationale

The project chose a **simple script-based approach** over a complex migration framework for the following reasons:

1. **Immediate Need**: Schema updates were needed quickly, not in weeks
2. **Codebase Impact**: Full migration framework would require refactoring ~50+ database calls
3. **Risk Assessment**: Large refactoring could introduce bugs in working code
4. **Team Velocity**: Focus on new features rather than rewriting existing infrastructure
5. **Future Flexibility**: Script approach can be replaced with migration framework later if needed

The script approach provides 80% of the benefits with 20% of the complexity, making it the right choice for the current project stage.